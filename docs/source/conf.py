# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath("../.."))


# -- Project information -----------------------------------------------------

project = "factorio-draftsman"
copyright = "2025, redruin1"
author = "redruin1"

# The full version, including alpha/beta/rc tags
import draftsman
release = draftsman.__version__


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    #'sphinx.ext.napoleon',
    "sphinx.ext.duration",
    "sphinx.ext.autodoc",
    # "sphinx_autodoc_typehints",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx_copybutton",
    # "sphinx-jsonschema",
    "sphinx_toolbox.collapse",
    "enum_tools.autoenum",
    "sphinx_immaterial",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# Type hints in function signature is too messy right now
autodoc_typehints = "signature"
# Make type-hints in signatures use shortened names instead of fully qualified
autodoc_typehints_format = "short"
# Make autogenerated order equivalent to source order
autodoc_member_order = "groupwise"

# Override group order in groupwise mode
from sphinx.ext import autodoc

# Overridden
autodoc.Documenter.member_order = 0
autodoc.DataDocumenter.member_order = 10
autodoc.FunctionDocumenter.member_order = 20
autodoc.ClassDocumenter.member_order = 30
autodoc.AttributeDocumenter.member_order = 40
autodoc.PropertyDocumenter.member_order = 40
autodoc.MethodDocumenter.member_order = 50
autodoc.ExceptionDocumenter.member_order = 60

object_description_options = [
    ("py:.*", dict(include_fields_in_toc=False)),
]

# Remove ugly Annotated generations for types that should live as stated
# autodoc_type_aliases = {
#     "int32": "int32",
#     "int64": "int64",
#     "LuaDouble": "LuaDouble",
#     "uint8": "uint8",
#     "uint16": "uint16",
#     "uint32": "uint32",
#     "uint64": "uint64",
#     "ItemIDName": "ItemIDName",
#     "SignalIDName": "SignalIDName",
#     "EntityID": "EntityID",
#     "FluidID": "FluidID",
#     "TileID": "TileID",
#     "RecipeID": "RecipeID",
#     "ModuleID": "ModuleID",
# }
# Keep class names simple
add_module_names = False
# Split into multiple lines if single definitions are too long
maximum_signature_line_length = 88
# Suppress the module name of the python reference if it can be resolved
python_use_unqualified_type_names = True

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_immaterial"

html_theme_options = {
    "repo_url": "https://github.com/redruin1/factorio-draftsman",
    "repo_name": "factorio-draftsman",
    "repo_type": "github",
    "icon": {
        "repo": "fontawesome/brands/github"
    }
}

# html_logo = "../img/gear-24.svg"

# Icon on output HTML
html_favicon = "../img/draftsman_icon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# html_logo = "something" # TODO

html_static_path = ["_static"]

html_css_files = [
    'css/style.css'
]

highlight_language = "python"

sphinx_immaterial_custom_admonitions = [
    {
        "name": "serialized",
        "title": "Serialized",
        "icon": "octicons/arrow-both-24",
        "color": "green",
    },
]

# def fullname(o):
#     klass = o.__class__
#     module = klass.__module__
#     if module == 'builtins':
#         return klass.__qualname__ # avoid outputs like 'builtins.str'
#     return module + '.' + klass.__qualname__

# def autodoc_skip_member(app, what, name, obj, skip, options):
#     print(name)
#     print(obj)
#     print(fullname(obj))
#     excluded_members = [excluded_member.split(".") for excluded_member in options.get("exclude-members", [])]
#     print(excluded_members)

#     return skip


def setup(app):
    # Mostly just for readthedocs configuration pass
    # We check to see if the mods.pkl file exists
    # If it does, we ignore this step
    # If not, we run `update_draftsman_data()`
    # This ensures that the module is always setup before running autodoc, which is a must
    # Would be nice to just add a regular command in the readthedocs config, but that would be too simple
    import os.path
    import draftsman

    mods_pkl = os.path.join(draftsman.__path__[0], "data", "mods.pkl")
    if not os.path.isfile(mods_pkl):
        from draftsman.environment.update import update_draftsman_data

        update_draftsman_data(verbose=True)

    # # Run our custom skip member function
    # app.connect("autodoc-skip-member", autodoc_skip_member)


